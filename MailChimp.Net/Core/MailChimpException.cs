// --------------------------------------------------------------------------------------------------------------------
// <copyright file="MailChimpException.cs" company="Brandon Seydel">
//   N/A
// </copyright>
// --------------------------------------------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace MailChimp.Net.Core
{
    /// <summary>
    /// The exception that comes back from Mail Chimp when an invalid operation has occured.
    /// </summary>
    public class MailChimpException : Exception
    {
        public MailChimpException(string message):base(message)
        {
        }

        public List<Error> Errors { get; set; }

		public class Error
		{
			[JsonProperty("field")]
			public string Field { get; set; }
			[JsonProperty("message")]
			public string Message { get; set; }
		}


		/// <summary>
		/// Gets or Sets a human-readable explanation specific to this occurrence of the problem. Learn more about errors.
		/// </summary>
		public string Detail { get; set; }

        /// <summary>
        /// Gets or sets a string that identifies this specific occurrence of the problem. Please provide this ID when contacting support.
        /// </summary>
        public string Instance { get; set; }

        /// <summary>
        /// Gets or sets the HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem.
        /// </summary>
        public int Status { get; set; }

        /// <summary>
        /// Gets or sets a short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
        /// </summary>
        public string Title { get; set; }

        /// <summary>
        /// Gets or sets an absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type.
        /// </summary>
        public string Type { get; set; }

        public override IDictionary Data {
            get {
                var data = base.Data;
                data.Add("detail", this.Detail);
                data.Add("title", this.Title);
                data.Add("type", this.Type);
                data.Add("status", this.Status);
                data.Add("instance", this.Instance);
                data.Add("errors", this.Errors);
                return data;
            }
        }
    }
}
